     1                                  ; File: index2.asm
     2                                  ; 
     3                                  ; This program demonstrates the use of an indexed addressing mode
     4                                  ; to access 2 dimensional array elements.
     5                                  ;
     6                                  ; This program has no I/O. Use the debugger to examine its effects.
     7                                  ;
     8                                  	SECTION	.data			; Data section
     9                                  
    10                                  	; simulates a 2-dim array
    11                                  twodim:
    12 00000000 000000000100000002-     row1:	dd 00, 01, 02, 03, 04, 05, 06, 07, 08, 09 
    12 00000009 000000030000000400-
    12 00000012 000005000000060000-
    12 0000001B 000700000008000000-
    12 00000024 09000000           
    13 00000028 0A0000000B0000000C-     row2:	dd 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 
    13 00000031 0000000D0000000E00-
    13 0000003A 00000F000000100000-
    13 00000043 001100000012000000-
    13 0000004C 13000000           
    14 00000050 140000001500000016-     		dd 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 
    14 00000059 000000170000001800-
    14 00000062 0000190000001A0000-
    14 0000006B 001B0000001C000000-
    14 00000074 1D000000           
    15 00000078 1E0000001F00000020-     		dd 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 
    15 00000081 000000210000002200-
    15 0000008A 000023000000240000-
    15 00000093 002500000026000000-
    15 0000009C 27000000           
    16 000000A0 28000000290000002A-     		dd 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 
    16 000000A9 0000002B0000002C00-
    16 000000B2 00002D0000002E0000-
    16 000000BB 002F00000030000000-
    16 000000C4 31000000           
    17 000000C8 320000003300000034-     		dd 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 
    17 000000D1 000000350000003600-
    17 000000DA 000037000000380000-
    17 000000E3 00390000003A000000-
    17 000000EC 3B000000           
    18 000000F0 3C0000003D0000003E-     		dd 60, 61, 62, 63, 64, 65, 66, 67, 68, 69 
    18 000000F9 0000003F0000004000-
    18 00000102 000041000000420000-
    18 0000010B 004300000044000000-
    18 00000114 45000000           
    19 00000118 460000004700000048-     		dd 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 
    19 00000121 000000490000004A00-
    19 0000012A 00004B0000004C0000-
    19 00000133 004D0000004E000000-
    19 0000013C 4F000000           
    20 00000140 500000005100000052-     		dd 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 
    20 00000149 000000530000005400-
    20 00000152 000055000000560000-
    20 0000015B 005700000058000000-
    20 00000164 59000000           
    21 00000168 5A0000005B0000005C-     		dd 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 
    21 00000171 0000005D0000005E00-
    21 0000017A 00005F000000600000-
    21 00000183 006100000062000000-
    21 0000018C 63000000           
    22                                  
    23                                  rowlen: equ row2 - row1
    24                                  
    25                                  	SECTION .text			; Code section.
    26                                  	global _start
    27 00000000 90                      _start: nop				; Entry point.
    28                                  
    29                                  	; Add 5 to each element of row 7. Simulate:
    30                                  	;
    31                                  	;  for (i = 0 ; i < 10 ; i++) {
    32                                  	;     twodim[7][i] += 5 ;
    33                                  	;  }
    34                                  
    35 00000001 B900000000              init1:	mov	rcx, 0			; rcx simulates i
    36 00000006 B828000000              		mov	rax, rowlen		; compute offset of twodim[7][0] 
    37 0000000B BA07000000              		mov	rdx, 7
    38 00000010 48F7E2                  		mul	rdx			    ; rax := rax * rdx
    39 00000013 7213                    		jc	alldone			; 128-bit value product is bad
    40                                  
    41 00000015 4883F90A                loop1:	cmp	rcx, 10			; i < 10 ?
    42 00000019 7D0D                    		jge	done1
    43 0000001B 838488[00000000]05      		add	[rax+4*rcx+twodim], dword 5
    44 00000023 48FFC1                  		inc	rcx				; i++
    45 00000026 EBED                    		jmp	loop1
    46                                  done1:
    47                                  
    48                                  alldone:
    49 00000028 BF00000000              		mov	rdi, 0			; exit code, 0=normal
    50 0000002D B83C000000              		mov	rax, 60			; Exit.
    51 00000032 0F05                    		syscall				; Call kernel.
